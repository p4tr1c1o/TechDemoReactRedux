{"version":3,"sources":["reducers/productos-reducer.tsx","reducers/snackbar-reducer.tsx","actions/productos-actions.tsx","hooks.tsx","components/productos/producto-formulario/producto-formulario.tsx","domain/producto-model.tsx","components/productos/productos-gestion/productos-gestion.tsx","App.tsx","serviceWorker.ts","store.tsx","index.tsx"],"names":["productosSlice","createSlice","name","initialState","procesando","allProductos","reducers","PROCESANDO","state","SET_PRODUCTOS","action","payload","ADD_PRODUCTO","EDIT_PRODUCTO","map","producto","id","REMOVE_PRODUCTO","filter","p","actions","snackbarSlice","message","showMessage","SUCCESS","severity","ERROR","CLEAR","undefined","handleErrors","response","ok","Error","status","statusText","useAppDispatch","useDispatch","useAppSelector","useSelector","ProductoFormulario","props","Dialog","open","onClose","onCancelar","maxWidth","DialogTitle","DialogContent","initialValues","model","nombre","descripcion","validate","values","errors","length","onSubmit","onGuardar","isSubmitting","submitForm","className","Box","margin","component","TextField","type","variant","fullWidth","label","required","multiline","rows","Button","onClick","color","disabled","Producto","buildBotonesGrilla","onEdit","onDelete","params","IconButton","row","ProductosGestion","dispatch","useState","openDialog","setOpenDialog","setOpenSnack","setModel","productos","loading","columns","field","headerName","width","align","headerAlign","disableColumnMenu","flex","renderCell","fetch","method","headers","body","JSON","stringify","then","json","catch","e","console","error","sortable","disableClickEventBubbling","useEffect","data","CircularProgress","Card","pageSize","result","createProducto","App","process","REACT_APP_ENV","snackbar","Paper","Snackbar","autoHideDuration","elevation","Boolean","window","location","hostname","match","store","configureStore","reducer","snackbarReducer","productosReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12627684.chunk.js","sourcesContent":["import Producto from '../domain/producto-model'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, } from '../store';\n\ntype ProductosState = {\n    procesando: boolean,\n    allProductos: Producto[]\n}\n\nconst initialState: ProductosState = {\n    procesando: false,\n    allProductos: []\n}\n\nconst productosSlice = createSlice({\n    name: \"productos\",\n    initialState,\n    reducers: {\n        PROCESANDO: (state: ProductosState) => {\n            state.procesando = true;\n        },\n        SET_PRODUCTOS: (state: ProductosState, action: PayloadAction<Producto[]>) => {\n            state.procesando = false;\n            state.allProductos = action.payload;\n        },\n        ADD_PRODUCTO: (state: ProductosState, action: PayloadAction<Producto>) => {\n            state.procesando = false;\n            state.allProductos = [...state.allProductos, action.payload];\n        },\n        EDIT_PRODUCTO: (state, action) => {\n            state.procesando = false;\n            state.allProductos = state.allProductos\n                .map(producto => (producto.id === action.payload.id) ? action.payload : producto)\n        },\n        REMOVE_PRODUCTO: (state, action: PayloadAction<Producto>) => {\n            state.procesando = false;\n            state.allProductos = state.allProductos.filter(p => p.id !== action.payload.id)\n        },\n    }\n});\n\n// Selectors\nexport const allProductos = (state: RootState) => state.productos;\n\nexport const {\n    PROCESANDO,\n    SET_PRODUCTOS,\n    ADD_PRODUCTO,\n    EDIT_PRODUCTO,\n    REMOVE_PRODUCTO,\n} = productosSlice.actions\n\nexport default productosSlice.reducer","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ntype SnackbarState = {\n    message: string,\n    showMessage: boolean,\n    severity?: \"error\" | \"warning\" | \"info\" | \"success\"\n}\n\nconst initialState: SnackbarState = {\n    message: '',\n    showMessage: false,\n}\n\nconst snackbarSlice = createSlice({\n    name: \"snackbar\",\n    initialState,\n    reducers: {\n        SUCCESS: (state: SnackbarState, action: PayloadAction<string>) => {\n            state.showMessage = true;\n            state.message = action.payload;\n            state.severity = 'success'\n        },\n        ERROR: (state: SnackbarState, action: PayloadAction<string>) => {\n            state.showMessage = true;\n            state.message = action.payload;\n            state.severity = 'error'\n        },\n        CLEAR: (state) => {\n            state.message = '';\n            state.showMessage = false;\n            state.severity = undefined;\n        }\n    }\n});\n\nexport const {\n    SUCCESS,\n    ERROR,\n    CLEAR\n} = snackbarSlice.actions\n\nexport default snackbarSlice.reducer\n","import Producto from '../domain/producto-model';\nimport { SET_PRODUCTOS, ADD_PRODUCTO, EDIT_PRODUCTO, REMOVE_PRODUCTO } from '../reducers/productos-reducer';\nimport { ERROR, SUCCESS } from '../reducers/snackbar-reducer';\n\n\nexport function getProductos() {\n    return dispatch => {\n        // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n        fetch('http://localhost:5000/productos', { method: \"GET\" })\n            .then(handleErrors)\n            .then(response => response.json())\n            .then(data => {\n                // console.log(data);\n                dispatch(SET_PRODUCTOS(data));\n            });\n    };\n}\n\nexport function createProducto(producto: Producto) {\n    return dispatch => {\n        fetch('http://localhost:5000/productos', {\n            method: \"POST\",\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify(producto)\n        })\n            .then(handleErrors)\n            .then(response => response.json())\n            .then(result => {\n                dispatch(ADD_PRODUCTO(result.producto));\n                dispatch(SUCCESS(\"Producto Creado\"));\n            });\n    };\n}\n\nexport function updateProducto(producto: Producto) {\n\n    return dispatch => {\n        fetch('http://localhost:5000/productos', {\n            method: \"PUT\",\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify(producto)\n        })\n            .then(handleErrors)\n            .then(response => response.json())\n            .then(result => {\n                // console.log(data);\n                dispatch(EDIT_PRODUCTO(result.producto));\n                dispatch(SUCCESS(\"Cambios Guardados\"));\n            });\n    };\n}\n\nexport function deleteProducto(producto: Producto) {\n    return dispatch => {\n        fetch('http://localhost:5000/productos', {\n            method: \"DELETE\",\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify({ id: producto.id })\n        })\n            .then(handleErrors)\n            .then(response => response.json())\n            .then(() => {\n                dispatch(REMOVE_PRODUCTO(producto));\n                dispatch(SUCCESS(\"Producto Eliminado\"));\n            })\n            .catch(e => {\n                dispatch(ERROR(e.message));\n                console.error(e);\n            });\n    };\n}\n\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.status + \"-\" + response.statusText);\n    }\n    return response;\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\nimport { Dialog, DialogTitle, DialogContent, Button } from '@material-ui/core'\nimport { Form, Formik } from 'formik'\nimport { TextField } from 'formik-material-ui'\nimport { Box } from '@material-ui/core'\nimport { Field } from 'formik'\nimport Producto from '../../../domain/producto-model'\nimport './producto-formulario.css';\n\ntype FormProps = {\n    model?: Producto,\n    open: boolean,\n    onGuardar: any,\n    onCancelar: any,\n}\n\nfunction ProductoFormulario(props: FormProps) {\n    return (\n        <Dialog open={props.open} onClose={props.onCancelar} maxWidth={false}>\n            <DialogTitle id=\"form-dialog-title\">Producto</DialogTitle>\n            <DialogContent>\n\n                <Formik\n                    initialValues={{\n                        id: props.model?.id,\n                        nombre: props.model?.nombre ?? \"\",\n                        descripcion: props.model?.descripcion ?? \"\",\n                    }}\n                    validate={(values) => {\n                        let errors: Partial<Producto> = {};\n\n                        if (values.nombre.length < 3) {\n                            errors.nombre = \"Por favor ingrese un nombre valido\";\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values) => {\n                        // console.log(values);\n                        props.onGuardar(values);\n                    }} >\n                    {({ isSubmitting, submitForm }) => (\n                        <Form className=\"formulario column\">\n                            <Box margin={1}>\n                                <Field\n                                    component={TextField}\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    label=\"Nombre\"\n                                    name=\"nombre\"\n                                    required={true}\n                                >\n                                </Field>\n                            </Box>\n                            <Box margin={1}>\n                                <Field\n                                    component={TextField}\n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    fullWidth={true}\n                                    label=\"Descripcion\"\n                                    name=\"descripcion\"\n                                    multiline\n                                    rows={4}>\n                                </Field>\n                            </Box>\n                            <Box className=\"row-end\">\n                                <Button onClick={props.onCancelar} color=\"primary\">\n                                    Cancelar\n                                </Button>\n                                <Button onClick={submitForm} variant=\"contained\" color=\"primary\" disabled={isSubmitting}>\n                                    Guardar\n                                </Button>\n                            </Box>\n                        </Form>\n                    )}\n                </Formik>\n            </DialogContent >\n        </Dialog >\n    )\n}\n\nexport default ProductoFormulario\n\n","class Producto {\n    productoId: number;\n    nombre: string;\n    descripcion: string;\n    id: number;\n\n    Producto(init?: Partial<Producto>) {\n        Object.assign(this, init);\n    }\n}\n\nexport default Producto;","import { PROCESANDO } from '../../../reducers/productos-reducer'\nimport { createProducto, deleteProducto, getProductos, updateProducto } from '../../../actions/productos-actions'\nimport { useAppDispatch, useAppSelector } from '../../../hooks'\nimport { useEffect, useState } from 'react';\nimport './productos-gestion.css';\nimport { DataGrid, GridCellParams, GridColDef } from '@material-ui/data-grid';\nimport { Card, CircularProgress, IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Button from '@material-ui/core/Button';\nimport ProductoFormulario from '../producto-formulario/producto-formulario';\nimport Producto from '../../../domain/producto-model';\n\n\nexport const ProductosGestion = () => {\n    const dispatch = useAppDispatch();\n    const [openDialog, setOpenDialog] = useState(false);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [model, setModel] = useState(new Producto());\n    const productos = useAppSelector(state => state.productos.allProductos);\n    const loading = useAppSelector(state => state.productos.procesando)\n    const columns: GridColDef[] = [\n        { field: 'id', headerName: 'ID', width: 100, align: \"center\", headerAlign: \"center\", disableColumnMenu: true },\n        { field: 'nombre', headerName: 'Nombre', width: 130 },\n        { field: 'descripcion', headerName: 'Descripcion', width: 130, flex: 1 },\n        {\n            field: 'actions', headerName: ' ', width: 150\n            , renderCell: buildBotonesGrilla(onEdit, onDelete), sortable: false, disableClickEventBubbling: true,\n        },\n    ];\n\n    useEffect(() => {\n        dispatch(PROCESANDO());\n        dispatch(getProductos());\n    }, []);\n\n    function onNuevo() {\n        setModel(new Producto());\n        setOpenDialog(true);\n    };\n\n    function onDelete(model) {\n        dispatch(deleteProducto(model));\n    }\n\n    function onEdit(row: Producto) {\n        setModel(row);\n        setOpenDialog(true);\n    }\n\n    function onGuardar(model: Producto) {\n        if (model.id) {\n            dispatch(updateProducto(model));\n        }\n        else {\n            dispatch(createProducto(model));\n        }\n        setOpenDialog(false);\n        setOpenSnack(true);\n    };\n\n    function onCancelar() {\n        setOpenDialog(false);\n    };\n\n    if (loading) return (<CircularProgress />)\n\n    return (\n        <section>\n            <div className=\"row-end\">\n                <Button variant=\"outlined\" color=\"primary\" onClick={onNuevo}>+ Nuevo Producto</Button>\n            </div>\n            <Card className=\"card-grid\">\n                <DataGrid rows={productos} columns={columns} pageSize={8} />\n            </Card>\n\n            <ProductoFormulario open={openDialog} model={model} onCancelar={onCancelar} onGuardar={onGuardar} />\n        </section >\n    )\n}\n\nfunction buildBotonesGrilla(onEdit: Function, onDelete: Function) {\n    return (params: GridCellParams) => {\n        return (\n            <article>\n                <strong>\n                    <IconButton onClick={() => onEdit(params.row)}>\n                        <EditIcon />\n                    </IconButton>\n                </strong >\n                <strong>\n                    <IconButton onClick={() => onDelete(params.row)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </strong >\n            </article>\n        );\n    };\n}\n\n\nexport default ProductosGestion;\n","\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ProductosGestion from './components/productos/productos-gestion/productos-gestion';\nimport './App.css';\nimport { useAppDispatch, useAppSelector } from './hooks'\nimport { Paper } from '@material-ui/core';\nimport { Snackbar } from '@material-ui/core';\nimport { CLEAR } from './reducers/snackbar-reducer';\n\nexport const App = () => {\n    const { REACT_APP_ENV } = process.env;\n    const dispatch = useAppDispatch();\n    const { message, showMessage, severity } = useAppSelector(state => state.snackbar);\n\n    function onClose() {\n        dispatch(CLEAR());\n    }\n\n    return (\n\n        <main>\n            <Paper className=\"papel\">\n\n                <header>\n                    <h1>ENV:{process.env.NODE_ENV}</h1>\n                </header>\n                <ProductosGestion />\n\n                <Snackbar open={showMessage} autoHideDuration={6000} onClose={onClose}>\n                    <MuiAlert elevation={6} variant=\"filled\" onClose={onClose} severity={severity}>\n                        {message}\n                    </MuiAlert>\n                </Snackbar>\n\n            </Paper>\n        </ main>\n\n    );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport snackbarReducer from './reducers/snackbar-reducer';\nimport productosReducer from './reducers/productos-reducer';\n\n\nexport const store = configureStore({\n    reducer: {\n        snackbar: snackbarReducer,\n        productos: productosReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}